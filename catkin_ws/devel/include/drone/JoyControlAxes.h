// Generated by gencpp from file drone/JoyControlAxes.msg
// DO NOT EDIT!


#ifndef DRONE_MESSAGE_JOYCONTROLAXES_H
#define DRONE_MESSAGE_JOYCONTROLAXES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone
{
template <class ContainerAllocator>
struct JoyControlAxes_
{
  typedef JoyControlAxes_<ContainerAllocator> Type;

  JoyControlAxes_()
    : axes()  {
      axes.assign(0);
  }
  JoyControlAxes_(const ContainerAllocator& _alloc)
    : axes()  {
  (void)_alloc;
      axes.assign(0);
  }



   typedef boost::array<uint16_t, 4>  _axes_type;
  _axes_type axes;





  typedef boost::shared_ptr< ::drone::JoyControlAxes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone::JoyControlAxes_<ContainerAllocator> const> ConstPtr;

}; // struct JoyControlAxes_

typedef ::drone::JoyControlAxes_<std::allocator<void> > JoyControlAxes;

typedef boost::shared_ptr< ::drone::JoyControlAxes > JoyControlAxesPtr;
typedef boost::shared_ptr< ::drone::JoyControlAxes const> JoyControlAxesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone::JoyControlAxes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone::JoyControlAxes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone::JoyControlAxes_<ContainerAllocator1> & lhs, const ::drone::JoyControlAxes_<ContainerAllocator2> & rhs)
{
  return lhs.axes == rhs.axes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone::JoyControlAxes_<ContainerAllocator1> & lhs, const ::drone::JoyControlAxes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone::JoyControlAxes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone::JoyControlAxes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone::JoyControlAxes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone::JoyControlAxes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone::JoyControlAxes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone::JoyControlAxes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone::JoyControlAxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1b78b75a49603d998b276567ad61bb1";
  }

  static const char* value(const ::drone::JoyControlAxes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1b78b75a49603d9ULL;
  static const uint64_t static_value2 = 0x98b276567ad61bb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone::JoyControlAxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone/JoyControlAxes";
  }

  static const char* value(const ::drone::JoyControlAxes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone::JoyControlAxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# represents the channels that the FC accepts\n"
"# [Roll, Pitch, Throttle, Yaw]\n"
"uint16[4] axes\n"
;
  }

  static const char* value(const ::drone::JoyControlAxes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone::JoyControlAxes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyControlAxes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone::JoyControlAxes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone::JoyControlAxes_<ContainerAllocator>& v)
  {
    s << indent << "axes[]" << std::endl;
    for (size_t i = 0; i < v.axes.size(); ++i)
    {
      s << indent << "  axes[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.axes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MESSAGE_JOYCONTROLAXES_H
